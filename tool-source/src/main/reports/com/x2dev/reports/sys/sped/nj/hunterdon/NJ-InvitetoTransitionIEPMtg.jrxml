/*
 * ====================================================================
 *
 * X2 Development Corporation
 *
 * Copyright (c) 2002-2006 X2 Development Corporation.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, is not permitted without express written agreement
 * from X2 Development Corporation.
 *
 * ====================================================================
 */
package com.x2dev.reports.nj.hunterdon;

import java.text.SimpleDateFormat;
import java.util.*;

import net.sf.jasperreports.engine.JRDataSource;

import org.apache.ojb.broker.query.*;

import com.follett.fsc.core.framework.persistence.BeanQuery;
import com.follett.fsc.core.k12.beans.*;
import com.follett.fsc.core.k12.business.dictionary.DataDictionary;
import com.follett.fsc.core.k12.business.dictionary.ExtendedDictionaryAttributes;
import com.follett.fsc.core.k12.tools.reports.*;
import com.follett.fsc.core.k12.web.AppGlobals;
import com.follett.fsc.core.k12.web.UserDataContainer;
import com.x2dev.sis.model.beans.*;
import com.x2dev.utils.DateUtils;
import com.x2dev.utils.StringUtils;
import com.x2dev.utils.types.PlainDate;

/**
 * Java source for the NJ IEP meeting invitation form. This class prepares a  ReportDataGrid that 
 * contains a row for each page of the report. One page is printed per team member with the
 * "print invitation" field set to true.l
 * <p>
 * Special handling exists for printing blank invitations. In this case, a single copy of the letter
 * is included. The report is designed to work directly off a current "IepMeetingInvitation" object
 * on a detail page in addition to from a form-enabled area (forms manager, workflow, etc.).
 * 
 * @author X2 Development Corporation
 */
public class MeetingInviteMainData extends BaseFormReportJavaSource
{
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    // Constants for the letter (N3I) portion of the report
    public static final String      TO_PARAMETER = "to";
    private static final String 	EMPTY_STRING = "";
    private static final String 	FAX = "FAX";

    // Constants for the waiver (N3W) portion of the report
    public static final String      TEAM_MEMBER_PARAMETER = "teamMember";
    public static final String      WAIVER_TYPE_PARAMETER = "waiverType";
    
    public static final String      WAIVER_TYPE_EXCUSED = "excused";
    public static final String      WAIVER_TYPE_NOT_INVITED = "notInvited";
	private static final String 	REFCODE_STUDENT = "Student";
	private static final String 	REFCODE_PARENT = "Parent/Guardian";
	private static final int 		MAX_REPORT_COL_LIMIT = 7;

    // ReportDataGrid column constants for the main report
    private static final String     COL_SUBREPORT_DATA_SOURCE = "datasource";
    private static final String     COL_SUBREPORT_FORMAT = "format";
    private static final String     COL_PAGE_NUMBER = "pageNumber";
    private static final String     COL_PAGE_IDENTIFIER = "pageIdentifier";
    private static final String     COL_PARAMETER_MAP = "parameters";
    
    private static final String     PAGE_1_FORMAT_ID = "SYS-SPED-NJ-MTG-P1";
    private static final String		MEETING_FORM_DEF_ID = "INVITE-MTG-NOTICE";
    private static final String		PARAM_INVITEES_COL1 = "invitees1";
    private static final String		PARAM_INVITEES_COL2 = "invitees2";
    private static final String 	PARAM_BUSINESS_PHONE_NO = "BUSINESS_PHONE_NO";	
	private static final String 	PARAM_ADDRESS_LINE1 = "ADDRESS_LINE1";
	private static final String 	PARAM_ADDRESS_LINE2 = "ADDRESS_LINE2";
	private static final String 	PARAM_SCHOOL_ADDRESS_LINE1 = "SKL_ADDRESS_LINE1";
	private static final String 	PARAM_SCHOOL_ADDRESS_LINE2 = "SKL_ADDRESS_LINE2";
	private static final String 	PARAM_SCHOOL_PHONE_NO = "SKL_PHONE_NO";
	private static final String 	PARAM_SCHOOL_FAX_NO = "SKL_FAX_NO";
	private static final String 	PARAM_SKL_ADMIN1 = "SKL_ADMIN1";
	private static final String 	PARAM_SKL_ADMIN2 = "SKL_ADMIN2";
	private static final String 	PARAM_SKL_ADMIN3 = "SKL_ADMIN3";
    private static final String 	EXTN_WORK_PHONE = "(908)284-";
    
    private static final String 	ALIAS_STAFF_WORK_PHONE = "DOE STAFF WORK PHONE";
    private static final String     ALIAS_DEPT_SUPERVISOR = "DOE DEPT SUPERVISOR";
    private static final String     ALIAS_SCHOOL_FAX = "'DOE SCHOOL FAX";

	/**
	 * Reference code maps
	 */
	
    private int             m_currentPageNumber = 0;
    private Map             m_subReports = null;
    private Map 			m_subReportsStudent = null;

    private IepMeeting		m_currentMeeting = null;
    private IepData			m_currentIep = null;
    // ********
    // Student
    private static final String ALIAS_OTHER_CONTACT_PERSON = "sped-other-contact-person";
    private static final String ALIAS_MTG_INVITATION_DATE = "meeting-invitation-date";
	private IepMeeting 		m_meeting =null;
	private PlainDate 		m_responseDate = new PlainDate();
	/**
	 * Params
	 */
	private static final String PARAM_AGE_CATEGORY = "AGE_CATEGORY";
	private static final String PARAM_CHAIR_PERSON = "CHAIR_PERSON";
	private static final String PARAM_MEMBER_ROLE = "MEMBER_ROLE";
	private static final String PARAM_FORM_DATE = "FORM_DATE";
	private static final String PARAM_INVITED_TEAM_MBRS1 = "INVITED_TEAM_MBRS1";
	private static final String PARAM_INVITED_TEAM_MBRS2 = "INVITED_TEAM_MBRS2";
	private static final String PARAM_MEETING_DATE = "MEETING_DATE";
	private static final String PARAM_MEETING_TIME = "MEETING_TIME";
	private static final String PARAM_MEETING_LOCATION = "MEETING_LOCATION";
	private static final String PARAM_OTHER_CONTACT_PERSON = "OTHER_CONTACT_PERSON";
	private static final String PARAM_RESPONSE_DATE = "RESPONSE_DATE";
	private static final String PARAM_STUDENT_NAME = "STUDENT_NAME";
	private static final String PARAM_STUDENT_FIRST_NAME = "STUDENT_FIRST_NAME";
	private static final String PARAM_SCHOOL_NAME = "SCHOOL_NAME";
	private static final String PARAM_PERSON_NAME = "PERSON_NAME";

	
	
	/**
	 * Other Constants
	 */
	private static final String AGE_CATEGORY_U18 = "AgeCategoryU18";
	private static final String AGE_CATEGORY_O18 = "AgeCategoryO18";



	private static final String TITLE_CASE_MANAGER = "Case Manager";
	//private static final int  MAX_REPORT_COL_LIMIT_STUDENT = 7;
	
	private final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("MM/dd/yyyy");
	private final SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("h:mm a");
	
	
	
    // ReportDataGrid column constants for the main report

    private static final String     PAGE_1_FORMAT_ID_STUDENT = "SYS-SPED-NJ-TRMTG-P1";
    private static final String		MEETING_FORM_DEF_ID_STUDENT = "STU-INVITE-TRANS-MTG";    
    // ********
    
    
    /**
	 * @see com.follett.fsc.core.k12.tools.reports.ReportJavaSourceNet#gatherData()
	 */
	@Override
	protected JRDataSource gatherData() throws Exception
	{

		ReportDataGrid grid = new ReportDataGrid();
	    loadSubReports();

	    if (m_currentMeeting != null)
	    {	
	    	setFormStorage(m_currentMeeting);
	    	setFormOwner(m_currentMeeting.getIepData());
	    }
	    
	    m_meeting = (IepMeeting) getFormStorage();
	    
	    IepMeeting meeting = (IepMeeting) getFormStorage();
	    
	    if (isBlank())
	    {
	        preparePage1(grid, new IepMeetingAttendance(getBroker().getPersistenceKey()), "", "");
	        AppGlobals.getLog().severe("1 ");
	    }
	    else
	    {
	
	    	StringBuilder inviteeString1 = new StringBuilder();
	    	StringBuilder inviteeString2 = new StringBuilder();
	    	int inviteeCount = 0;
	    	
	        /*
	         * Build list of invitees and collection of attendance objects for each page of the invitation
	         */
	    	List<IepMeetingAttendance> attendanceList = new LinkedList<IepMeetingAttendance>();
	    	
	        Criteria attendanceCriteria = new Criteria();
	        attendanceCriteria.addEqualTo(IepMeetingAttendance.COL_IEP_MEETING_OID, meeting.getOid());
	        attendanceCriteria.addEqualTo(IepMeetingAttendance.COL_EXCUSED_INDICATOR, new Boolean(false));
	        
	        AppGlobals.getLog().severe("Meeting OID is " + meeting.getOid());
	        AppGlobals.getLog().severe("2 ");
	        
	        QueryByCriteria attendanceQuery = new QueryByCriteria(IepMeetingAttendance.class, attendanceCriteria);
	        attendanceQuery.addOrderByAscending(IepMeetingAttendance.REL_TEAM_MEMBER + "." + IepTeamMember.COL_NAME_VIEW);
	        
	        QueryIterator attendance = getBroker().getIteratorByQuery(attendanceQuery);
	        try
	        {
	            while (attendance.hasNext())
	            {
	                IepMeetingAttendance attendanceBean = (IepMeetingAttendance) attendance.next();
	                
	                StringBuilder inviteeString = inviteeString1;
	                if (inviteeCount++ > MAX_REPORT_COL_LIMIT)
	                {
	                	inviteeString = inviteeString2;
	                }
	                
	                if (!attendanceBean.getHideNameIndicator())
	                {
	                    inviteeString.append(attendanceBean.getTeamMember().getNameView());
	                    inviteeString.append(" - ");
	                }
	                
	                inviteeString.append(attendanceBean.getTeamMember().getMemberRoleCode());
	                inviteeString.append("\n");
	                
	            	attendanceList.add(attendanceBean);
	            }
	        }
	        finally
	        {
	            attendance.close();
	        }
	
	        for (IepMeetingAttendance attendanceBean : attendanceList)
	        {
        		if ( attendanceBean.getTeamMember().getMemberRoleCode().equals("Student")) {
        			preparePage1Student(grid, attendanceBean, inviteeString1.toString(),inviteeString2.toString());    			
        		}
        		else {
        			preparePage1(grid, attendanceBean, inviteeString1.toString(), inviteeString2.toString());
        		}
        		
	            
	        }
	    }
	    
	    grid.beforeTop();
	    
	    return grid;
	}

	/**
     * @see com.follett.fsc.core.k12.tools.ToolJavaSource#saveState(com.follett.fsc.core.k12.web.UserDataContainer)
     */
    @Override
	protected void saveState(UserDataContainer userData) 
    {
		super.saveState(userData);
		m_currentIep = (IepData) userData.getCurrentRecord(IepData.class);
		/*
		 * If the form def is null, then the invitation was run from the reports menu on the meeting list.
		 * In this case the superclass can't determine the form definition so we hard-set it here.
		 */
		
		if (getFormDefinition() == null)
		{
			Criteria criteria = new Criteria();
			criteria.addEqualTo(FormDefinition.COL_ID, MEETING_FORM_DEF_ID);
			
			BeanQuery beanQuery = new BeanQuery(FormDefinition.class, criteria);
			
			setFormDefinition((FormDefinition) getBroker().getBeanByQuery(beanQuery));
			
			m_currentMeeting = (IepMeeting) userData.getCurrentRecord(IepMeeting.class);
		}
	}
    
    /**
     * Returns the format of subreport for the given page constant.
     * 
     * @return byte[]
     */
    private byte[] getSubreportFormat(String pageId)
    {
        Report report = (Report) m_subReports.get(pageId);
        return report.getCompiledFormat();
    }

    /**
     * Loads each subreport into a map for fast retrieval.
     */
    private void loadSubReports()
    {
        Criteria criteria = new Criteria();
        criteria.addEqualTo(Report.COL_ORGANIZATION1_OID, getOrganization().getOid());
        criteria.addEqualTo(Report.COL_ID, PAGE_1_FORMAT_ID);
        
        QueryByCriteria query = new QueryByCriteria(Report.class, criteria);
        
        m_subReports = getBroker().getMapByQuery(query, Report.COL_ID, 8);
        
        Criteria criteriaStudent = new Criteria();
        criteriaStudent.addEqualTo(Report.COL_ORGANIZATION1_OID, getOrganization().getOid());
        criteriaStudent.addEqualTo(Report.COL_ID, PAGE_1_FORMAT_ID_STUDENT);
        
        QueryByCriteria queryStudent = new QueryByCriteria(Report.class, criteriaStudent);
        
        m_subReportsStudent = getBroker().getMapByQuery(queryStudent, Report.COL_ID, 8);
    }

    // *****
    // Student
    /**
     * Returns the format of subreport for the given page constant.
     * 
     * @return byte[]
     */
    private byte[] getSubreportFormatStudent(String pageId)
    {
        Report report = (Report) m_subReportsStudent.get(pageId);
        return report.getCompiledFormat();
    }
    // *****
    
    
    
    
    
    /**
     * Prepares the first page.
     * 
     * @param grid
     * @param attendanceBean
     */
    private void preparePage1(ReportDataGrid grid, IepMeetingAttendance attendanceBean, String invitees1, String invitees2)
    {    	
	    if (attendanceBean.getPrintInvitationIndicator())
	    {
	        JRDataSource dataSource = new SimpleFormDataSource(getFormStorage(), getFormOwner(), getDictionary(), getLocale());
	        m_currentIep  = attendanceBean.getIepData();
	        ExtendedDictionaryAttributes extendDictionary = m_currentIep.getExtendedDataDictionary();
	        DataDictionary dictionary = DataDictionary.getDistrictDictionary(extendDictionary, getBroker().getPersistenceKey());
	        SisStaff staff = m_currentIep.getStaff();
	        String extnWorkPhone = (String) staff.getFieldValueByAlias(ALIAS_STAFF_WORK_PHONE, dictionary);
	        String businessPhoneNo = (!StringUtils.isEmpty(extnWorkPhone)) ? EXTN_WORK_PHONE + extnWorkPhone : "";
	        HashMap<String, Object> parameterMap = new HashMap<String, Object>();
	        parameterMap.put(TO_PARAMETER, attendanceBean.getTeamMember());
	        parameterMap.putAll(getParameters());
	        parameterMap.put(PARAM_INVITEES_COL1, invitees1);
	        parameterMap.put(PARAM_INVITEES_COL2, invitees2);
	        parameterMap.put(PARAM_BUSINESS_PHONE_NO, businessPhoneNo);	
	        loadReportHeader(parameterMap);
	        loadInviteeAddressDetails(attendanceBean, parameterMap);
	        grid.append();
	        grid.set(COL_SUBREPORT_DATA_SOURCE, dataSource);
	        grid.set(COL_SUBREPORT_FORMAT, getSubreportFormat(PAGE_1_FORMAT_ID));
	        grid.set(COL_PARAMETER_MAP, parameterMap);
	        grid.set(COL_PAGE_NUMBER, new Integer(++m_currentPageNumber));
	        grid.set(COL_PAGE_IDENTIFIER, "P1");
	    }
    }

 // **************************************************************************************************************************	
 // Student   
    /**
     * Prepares the first page for Student.
     * 
     * @param grid
     * @param attendanceBean
     */
    private void preparePage1Student(ReportDataGrid grid, IepMeetingAttendance attendanceBean, String invitees1, String invitees2)
    {
		HashMap<String, Object> parameterMap = new HashMap<String, Object>();
	    if (attendanceBean.getPrintInvitationIndicator())
	    { 
			ExtendedDictionaryAttributes extendDictionary = m_currentIep.getExtendedDataDictionary();
			DataDictionary dictionary = DataDictionary.getDistrictDictionary(extendDictionary, getBroker().getPersistenceKey());			
			getChairPersonDetails(parameterMap, dictionary);			
		
			SisStudent student = m_currentIep.getStudent();
			Person person = attendanceBean.getTeamMember().getPerson();			
			String schoolName  = student.getSchool().getName();
			PlainDate dateOfBirth = student.getPerson().getDob(); 
			PlainDate meetingDate = m_meeting.getDate();
			
			int age = 15; //Some default age value which is less than 18 to print the form for parents.
			parameterMap.put(PARAM_MEETING_DATE, "");
			parameterMap.put(PARAM_MEETING_TIME, "");
			parameterMap.put(PARAM_RESPONSE_DATE, "");
			if(meetingDate != null)
			{
				age = Person.getAgeAsOfDate(dateOfBirth, meetingDate);
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(meetingDate);
				calendar.add(Calendar.DATE, -2);
				m_responseDate = DateUtils.getPriorWeekDay(new PlainDate(calendar.getTime()));
				parameterMap.put(PARAM_MEETING_DATE, DATE_FORMATTER.format(meetingDate));
				parameterMap.put(PARAM_MEETING_TIME, TIME_FORMATTER.format(m_meeting.getTime()));
				parameterMap.put(PARAM_RESPONSE_DATE, DATE_FORMATTER.format(m_responseDate));
			}
			PlainDate invitationDate =DateUtils.getDate((String)m_meeting.getFieldValueByAlias(ALIAS_MTG_INVITATION_DATE, dictionary));			
			
			
			
			
			
			
			String formDate = String.valueOf(invitationDate);
			
			AppGlobals.getLog().severe("formDate is " + formDate);
			
			String sFormatDate = "";
			
			if(formDate != null){
				String delims = "-";
				String[] tokens = formDate.split(delims);
				
				String pYear = tokens[0];
				String pMonth = tokens[1];
				String pDay = tokens[2];
				
				sFormatDate = pMonth + "/" + pDay + "/" + pYear;
			}		
			
			formDate = sFormatDate;
			
			SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
			SimpleDateFormat formatted = new SimpleDateFormat("MMMMM dd, yyyy");
			
	//		String dFormDate = formatted.format(formatter.parse(formDate));			
			
			
			
			
			
			
			
			
			
			
			parameterMap.put(PARAM_AGE_CATEGORY, (age < 18) ? AGE_CATEGORY_U18 : AGE_CATEGORY_O18);
			parameterMap.put(PARAM_FORM_DATE, DATE_FORMATTER.format(invitationDate));
			parameterMap.put(PARAM_STUDENT_NAME, student.getPerson().getFirstName() + " " + student.getPerson().getLastName());
			parameterMap.put(PARAM_STUDENT_FIRST_NAME, student.getPerson().getFirstName());
			parameterMap.put(PARAM_SCHOOL_NAME, schoolName);			
			parameterMap.put(PARAM_MEETING_LOCATION, m_meeting.getLocation());
			parameterMap.put(PARAM_OTHER_CONTACT_PERSON, m_meeting.getFieldValueByAlias(ALIAS_OTHER_CONTACT_PERSON, dictionary));
			parameterMap.put(PARAM_INVITED_TEAM_MBRS1, invitees1);	
			parameterMap.put(PARAM_INVITED_TEAM_MBRS2, invitees2);
			loadReportHeader(parameterMap);
			loadInviteeAddressDetailsStudent(attendanceBean, parameterMap, student, person); 
	        grid.append();
	        JRDataSource dataSource = new SimpleFormDataSource(getFormStorage(), getFormOwner(), getDictionary(), getLocale());		
	        grid.set(COL_SUBREPORT_DATA_SOURCE, dataSource);
	        grid.set(COL_SUBREPORT_FORMAT, getSubreportFormatStudent(PAGE_1_FORMAT_ID_STUDENT));
	        grid.set(COL_PARAMETER_MAP, parameterMap);
	        grid.set(COL_PAGE_NUMBER, new Integer(++m_currentPageNumber));
	        grid.set(COL_PAGE_IDENTIFIER, "P1");
		 }
    } 
    
	/**
	 * Load the address details of Parent Invitee
	 * @param attendanceBean
	 * @param parameterMap
	 * @param student
	 * @param person
	 */
	private void loadInviteeAddressDetailsStudent(IepMeetingAttendance attendanceBean,
			HashMap<String, Object> parameterMap, SisStudent student,Person person) 
	{
		parameterMap.put(PARAM_PERSON_NAME, person.getFirstName() + " " + person.getLastName());
		parameterMap.put(PARAM_ADDRESS_LINE1, EMPTY_STRING);
		parameterMap.put(PARAM_ADDRESS_LINE2, EMPTY_STRING);	
		
		String title = attendanceBean.getTeamMember().getMemberRoleCode();
		
		if(title != null && REFCODE_STUDENT.equalsIgnoreCase(title) || REFCODE_PARENT.equalsIgnoreCase(title))
		{
			Address mailingAddress = student.getPerson().getMailingAddress();
			if(null == mailingAddress){
				mailingAddress = student.getPerson().getPhysicalAddress();
			}
			if(mailingAddress != null)
			{
				parameterMap.put(PARAM_ADDRESS_LINE1, mailingAddress.getAddressLine01());
				parameterMap.put(PARAM_ADDRESS_LINE2, mailingAddress.getAddressLine03());
			}
		}
		else
		{
			SisSchool school = student.getSchool();
			SisAddress schoolAddress= school.getAddress();			
			if(schoolAddress != null)
			{
				parameterMap.put(PARAM_ADDRESS_LINE1, schoolAddress.getAddressLine01());
				parameterMap.put(PARAM_ADDRESS_LINE2, schoolAddress.getAddressLine03());
			}
		}
	} 
	
	
	/**
	 * This method sets the chair person's details for the signature line of the SPED form. If the team members does not
	 * include a chair person, then the case manager signs the SPED form.
	 */
	private void getChairPersonDetails(HashMap<String, Object> parameterMap, DataDictionary dictionary)
	{
		String businessPhoneNo = "";
		addParameter(PARAM_CHAIR_PERSON, "");
		SisPerson chairPerson = null;
		SisStaff caseManager = m_currentIep.getStaff();
		String title =  null;
		Collection<IepTeamMember> teamMbrs = m_currentIep.getTeamMembers();
		for(IepTeamMember teamMbr : teamMbrs)
		{
			if(teamMbr.getChairpersonIndicator())
			{
				chairPerson = teamMbr.getPerson();
				title = teamMbr.getMemberRoleCode();
				businessPhoneNo = EXTN_WORK_PHONE + (String) caseManager.getFieldValueByAlias(ALIAS_STAFF_WORK_PHONE, dictionary);
				break;
			}
		}
		
		if(chairPerson == null)		{
			
			if(caseManager != null)
			{
				chairPerson = caseManager.getPerson();				
				title = TITLE_CASE_MANAGER;
				businessPhoneNo = EXTN_WORK_PHONE + (String) caseManager.getFieldValueByAlias(ALIAS_STAFF_WORK_PHONE, dictionary);
			}
		}
		
		if(chairPerson != null)
		{
			parameterMap.put(PARAM_CHAIR_PERSON, chairPerson.getFirstName() + " " + chairPerson.getLastName());
			parameterMap.put(PARAM_MEMBER_ROLE, title);
			parameterMap.put(PARAM_BUSINESS_PHONE_NO, businessPhoneNo);	
		}
		
		
	}	
	
// **************************************************************************************************************************	

	private void loadInviteeAddressDetails(IepMeetingAttendance attendanceBean, HashMap<String, Object> parameterMap) 
	{
		SisStudent student = m_currentIep.getStudent();
		parameterMap.put(PARAM_ADDRESS_LINE1, EMPTY_STRING);
		parameterMap.put(PARAM_ADDRESS_LINE2, EMPTY_STRING);			
		String title = attendanceBean.getTeamMember().getMemberRoleCode();		
		if(title != null && REFCODE_STUDENT.equalsIgnoreCase(title) || REFCODE_PARENT.equalsIgnoreCase(title))
		{
			Address mailingAddress = student.getPerson().getMailingAddress();
			if(null == mailingAddress){
				mailingAddress = student.getPerson().getPhysicalAddress();
			}
			if(mailingAddress != null)
			{
				parameterMap.put(PARAM_ADDRESS_LINE1, mailingAddress.getAddressLine01());
				parameterMap.put(PARAM_ADDRESS_LINE2, mailingAddress.getAddressLine03());
			}
		}
		else
		{
			SisSchool school = student.getSchool();
			SisAddress schoolAddress= school.getAddress();			
			if(schoolAddress != null)
			{
				parameterMap.put(PARAM_ADDRESS_LINE1, schoolAddress.getAddressLine01());
				parameterMap.put(PARAM_ADDRESS_LINE2, schoolAddress.getAddressLine03());
			}
		}
	}
	
	private void loadReportHeader(HashMap<String, Object> parameterMap) 
	{
		SisStudent student = m_currentIep.getStudent();
		String admin1= "";
		
		parameterMap.put(PARAM_SCHOOL_ADDRESS_LINE1, EMPTY_STRING);
		parameterMap.put(PARAM_SCHOOL_ADDRESS_LINE2, EMPTY_STRING);
		parameterMap.put(PARAM_SCHOOL_PHONE_NO, EMPTY_STRING);
		parameterMap.put(PARAM_SKL_ADMIN1, EMPTY_STRING);
		parameterMap.put(PARAM_SKL_ADMIN2, EMPTY_STRING);
		parameterMap.put(PARAM_SKL_ADMIN3, EMPTY_STRING);
		SisSchool school = student.getSchool();	
		String fax = (String)school.getFieldValueByAlias(ALIAS_SCHOOL_FAX);
		parameterMap.put(PARAM_SCHOOL_FAX_NO, !StringUtils.isEmpty(fax)? FAX + fax : EMPTY_STRING);
		SisAddress schoolAddress= school.getAddress();	
		if(schoolAddress != null)
		{
			if(!StringUtils.isEmpty(schoolAddress.getPhone01()) ||
					!StringUtils.isEmpty(schoolAddress.getPhone02()))
			{
				parameterMap.put(PARAM_SCHOOL_PHONE_NO, (StringUtils.
						isEmpty(schoolAddress.getPhone01())? schoolAddress.getPhone02() : schoolAddress.getPhone01()));
			}
			parameterMap.put(PARAM_SCHOOL_ADDRESS_LINE1, schoolAddress.getAddressLine01());
			parameterMap.put(PARAM_SCHOOL_ADDRESS_LINE2, schoolAddress.getAddressLine03());
		}
		
		if(null != school.getAdministrator1())
		{
			SisPerson  adminPerson1 = school.getAdministrator1().getPerson();
			admin1= adminPerson1.getFirstName()+ " "+adminPerson1.getLastName();
			parameterMap.put(PARAM_SKL_ADMIN1, admin1);
			String superintendent = (String) school.getAdministrator1().getFieldValueByAlias(ALIAS_DEPT_SUPERVISOR);
			if(null != superintendent)
			{
				String[] admin2 = superintendent.split(",");
				parameterMap.put(PARAM_SKL_ADMIN2, admin2[1]+" "+admin2[0]);
			}
		}
	}
	

		
}